#ifndef _INC_SEARCH_IN_ROTATED_SORTED_ARRAY_II_
#define _INC_SEARCH_IN_ROTATED_SORTED_ARRAY_II_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:


Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true


Example 2:


Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

Follow up:


	This is a follow up problem toÂ Search in Rotated Sorted Array, where nums may contain duplicates.
	Would this affect the run-time complexity? How and why?

*/

class SearchInRotatedSortedArrayIi {
public:
	static void test() {
		
	}

	static bool search(vector<int>& nums, int target) {
		int l = 0;
        int r = nums.size() - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] == target) {
                return true;
            }
            int midv = 0;
            if (target < nums[0] == nums[mid] < nums[0]) {
                midv = nums[mid];
            } else {
                if (nums[mid] >= nums[0]) {
                    midv = INT_MIN;
                } else {
                    midv = INT_MAX;
                }
            }
            if (target > midv) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return false;
	}
};

#endif
