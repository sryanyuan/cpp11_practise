#ifndef _INC_PRODUCT_OF_ARRAY_EXCEPT_SELF_
#define _INC_PRODUCT_OF_ARRAY_EXCEPT_SELF_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given an array nums of n integers where n > 1, Â return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:


Input:  [1,2,3,4]
Output: [24,12,8,6]


Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)
*/

class ProductOfArrayExceptSelf {
public:
	static void test() {
		
	}

	static vector<int> productExceptSelf(vector<int>& nums) {
		vector<int> lmul(nums.size(), 0);
        vector<int> rmul(nums.size(), 0);
        int prevMul = 1;
        for (int i = 0; i < nums.size(); i++) {
            lmul[i] = prevMul * nums[i];
            prevMul = lmul[i];
        }
        prevMul = 1;
        for (int i = nums.size() - 1; i >= 0; i--) {
            rmul[i] = prevMul * nums[i];
            prevMul = rmul[i];
        }
        vector<int> res(nums.size(), 0);
        for (int i = 0; i < nums.size(); i++) {
            int val = 1;
            if (i > 0) {
                val *= lmul[i - 1];
            }
            if (i < nums.size() - 1) {
                val *= rmul[i + 1];
            }
            res[i] = val;
        }
        return res;
	}
};

#endif
