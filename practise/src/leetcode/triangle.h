#ifndef _INC_TRIANGLE_
#define _INC_TRIANGLE_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle


[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]


The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
*/

class Triangle {
public:
	static void test() {
        vector<vector<int>> triangle;
        vector<int> row;
        row.push_back(2);
        triangle.push_back(std::move(row));
        row.push_back(3);
        row.push_back(4);
        triangle.push_back(std::move(row));
        row.push_back(6);
        row.push_back(5);
        row.push_back(7);
        triangle.push_back(std::move(row));
        row.push_back(4);
        row.push_back(1);
        row.push_back(8);
        row.push_back(3);
        triangle.push_back(std::move(row));
        auto ret = minimumTotal(triangle);
	}

	static int minimumTotal(vector<vector<int>>& triangle) {
        if (triangle.empty()) {
            return 0;
        }
        if (triangle.size() == 1) {
            return triangle[0][0];
        }
		vector<vector<int>> costs = triangle;
        int minCost = INT_MAX;
        for (int i = 1; i < triangle.size(); i++) {
            vector<int> &row = triangle[i];
            for (int j = 0; j < row.size(); j++) {
                int cost = INT_MAX;
                if (j - 1 >= 0) {
                    cost = std::min(cost, triangle[i][j] + costs[i - 1][j - 1]);
                }
                if (j < row.size() - 1) {
                    cost = std::min(cost, triangle[i][j] + costs[i - 1][j]);
                }
                costs[i][j] = cost;
                if (i == triangle.size() - 1) {
                    minCost = std::min(minCost, cost);
                }
            }
        }
        return minCost;
	}
};

#endif
