#ifndef _INC_PALINDROME_PARTITIONING_
#define _INC_PALINDROME_PARTITIONING_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:


Input:Â "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]

*/

class PalindromePartitioning {
public:
	static void test() {
		auto res = partition("efe");
	}

	static vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> tmp;
		dfs(s, 0, tmp, res);
        return res;
	}

    static void dfs(string &s, int index, vector<string> &tmp, vector<vector<string>> &res) {
        int lsum = 0;
        for (auto &v : tmp) {
            lsum += v.size();
        }
        if (lsum == s.size()) {
            res.push_back(tmp);
            return;
        }
        if (index >= s.size()) {
            return;
        }
        for (int i = index; i < s.size(); i++) {
            string sub = s.substr(index, i - index + 1);
            if (!palindrome(sub)) {
                continue;
            }
            tmp.push_back(std::move(sub));
            dfs(s, i + 1, tmp, res);
            tmp.pop_back();
        }
    }

    static bool palindrome(string &s) {
        for (int i = 0; i < s.size() / 2; i++) {
            if (s[i] != s[s.size() - 1 - i]) {
                return false;
            }
        }
        return true;
    }
};

#endif
