#ifndef _INC_POWX_N_
#define _INC_POWX_N_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Implement pow(x, n), which calculates x raised to the power n (xn).

Example 1:


Input: 2.00000, 10
Output: 1024.00000


Example 2:


Input: 2.10000, 3
Output: 9.26100


Example 3:


Input: 2.00000, -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25


Note:


	-100.0 < x < 100.0
	n is a 32-bit signed integer, within the range [−231, 231 − 1]

*/

class PowxN {
public:
	static void test() {
		
	}

	static double myPow(double x, int n) {
		if (n == 0) {
            return 1;
        }
        bool neg = false;
        if (x < 0 && (n % 2) != 0) {
            neg = true;
            x = -x;
        }
        double res = x;
        long long tm = n;
        if (tm < 0) {
            res = 1 / res;
            tm = -tm;
        }
        double val = myPow(res, tm / 2);
        val *= val;
        if (tm % 2 != 0) {
            val *= res;
        }
        return neg ? -1 * val : val;
	}
};

#endif
