#ifndef _INC_PATH_SUM_II_
#define _INC_PATH_SUM_II_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note:Â A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,


      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1


Return:


[
   [5,4,11,2],
   [5,8,4,5]
]

*/

class PathSumIi : public TreeNodeCls {
public:
	static void test() {
		
	}

	static vector<vector<int>> pathSum(TreeNode* root, int sum) {
		vector<vector<int>> res;
        vector<int> tmp;
        walk(root, tmp, 0, sum, res);
        return res;
	}

    static void walk(TreeNode *node, vector<int> &tmp, int psum, int sum, vector<vector<int>> &res) {
        if (nullptr == node) {
            return;
        }
        if (nullptr == node->left && nullptr == node->right) {
            if (psum + node->val == sum) {
                tmp.push_back(node->val);
                res.push_back(tmp);
                tmp.pop_back();
            }
            return;
        }
        if (nullptr != node->left) {
            tmp.push_back(node->val);
            walk(node->left, tmp, psum + node->val, sum, res);
            tmp.pop_back();
        }
        if (nullptr != node->right) {
            tmp.push_back(node->val);
            walk(node->right, tmp, psum + node->val, sum, res);
            tmp.pop_back();
        }
    }
};

#endif
