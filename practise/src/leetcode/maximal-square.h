#ifndef _INC_MAXIMAL_SQUARE_
#define _INC_MAXIMAL_SQUARE_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Example:


Input: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4

*/

class MaximalSquare {
public:
	static void test() {
		
	}

	static int maximalSquare(vector<vector<char>>& matrix) {
        int res = 0;
		if (matrix.empty() || matrix[0].empty()) {
            return 0;
        }
        vector<int> dps(int(matrix.size() * matrix[0].size()), 0);
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[0].size(); j++) {
                if (matrix[i][j] == '0') {
                    continue;
                }
                if (i == 0 || j == 0) {
                    dps[i * matrix[0].size() + j] = 1;
                    if (res < 1) {
                        res = 1;
                    }
                } else {
                    int val = std::min(dps[(i - 1) * matrix[0].size() + j], 
                        dps[i * matrix[0].size() + j - 1]);
                    val = std::min(val, dps[(i - 1) * matrix[0].size() + j - 1]);
                    val++;
                    dps[i * matrix[0].size() + j] = val;
                    if (val > res) {
                        res = val;
                    }
                }
            }
        }
        return res * res;
	}
};

#endif
