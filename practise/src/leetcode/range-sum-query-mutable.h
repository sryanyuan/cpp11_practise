#ifndef _INC_RANGE_SUM_QUERY_MUTABLE_
#define _INC_RANGE_SUM_QUERY_MUTABLE_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.

Example:


Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8


Note:


	The array is only modifiable by the update function.
	You may assume the number of calls to update and sumRange function is distributed evenly.

*/

class RangeSumQueryMutable {
public:
    class NumArray {
    public:
        NumArray(vector<int> nums) {
            nums_ = nums;
            sums_ = nums_;
            int ps = 0;
            for (int i = 0; i < nums_.size(); i++) {
                sums_[i] = ps + nums_[i];
                ps = sums_[i];
            }
        }

        void update(int i, int val) {
            int diff = val - nums_[i];
            nums_[i] = val;
            for (int j = i; j < sums_.size(); j++) {
                sums_[j] += diff;
            }
        }

        int sumRange(int i, int j) {
            int pis = 0;
            if (i - 1 >= 0) {
                pis = sums_[i - 1];
            }
            return sums_[j] - pis;
        }

        vector<int> sums_;
        vector<int> nums_;
    };

    /**
    * Your NumArray object will be instantiated and called as such:
    * NumArray obj = new NumArray(nums);
    * obj.update(i,val);
    * int param_2 = obj.sumRange(i,j);
    */

	static void test() {
		int ar[] = {1, 3, 5};
        vector<int> nums(ar, ar + sizeof(ar) / sizeof(ar[0]));
        NumArray na(nums);
        auto res = na.sumRange(0, 2);
        na.update(1, 2);
        res = na.sumRange(0, 2);
	}
};

#endif
