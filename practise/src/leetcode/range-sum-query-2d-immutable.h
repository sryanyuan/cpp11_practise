#ifndef _INC_RANGE_SUM_QUERY_2D_IMMUTABLE_
#define _INC_RANGE_SUM_QUERY_2D_IMMUTABLE_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).



The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.


Example:

Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12



Note:

You may assume that the matrix does not change.
There are many calls to sumRegion function.
You may assume that row1 ≤ row2 and col1 ≤ col2.

*/

class RangeSumQuery2dImmutable {
public:
    class NumMatrix {
    public:
        NumMatrix(vector<vector<int>> matrix) {
            if (0 == matrix.size() || 0 == matrix[0].size()) {
                return;
            }
            sums_ = matrix;
            for (auto &row : sums_) {
                for (auto &col : row) {
                    col = 0;
                }
            }
            int rc = matrix.size();
            int cc = matrix[0].size();
            for (int i = 0; i < matrix.size(); i++) {
                for (int j = 0; j < matrix[i].size(); j++) {
                    int p1 = 0, pi = i, pj = j - 1;
                    if (pj >= 0) {
                        p1 = sums_[pi][pj];
                    }
                    int p2 = 0; pi = i - 1; pj = j;
                    if (pi >= 0) {
                        p2 = sums_[pi][pj];
                    }
                    int p3 = 0; pi = i - 1; pj = j - 1;
                    if (pi >= 0 && pj >= 0) {
                        p3 = sums_[pi][pj];
                    }
                    sums_[i][j] = p1 + p2 - p3 + matrix[i][j];
                }
            }
        }

        int sumRegion(int row1, int col1, int row2, int col2) {
            int p1 = 0, p2 = 0, p3 = 0;
            int sum = sums_[row2][col2];
            int pi = row2, pj = col1 - 1;
            if (pj >= 0) {
                p1 = sums_[pi][pj];
            }
            pi = row1 - 1; pj = col2;
            if (pi >= 0) {
                p2 = sums_[pi][pj];
            }
            pi = row1 - 1; pj = col1 - 1;
            if (pi >= 0 && pj >= 0) {
                p3 = sums_[pi][pj];
            }
            return sum - p1 - p2 + p3;
        }

        vector<vector<int>> sums_;
    };

    /**
    * Your NumMatrix object will be instantiated and called as such:
    * NumMatrix obj = new NumMatrix(matrix);
    * int param_1 = obj.sumRegion(row1,col1,row2,col2);
    */

	static void test() {
		vector<vector<int>> matrix;
        vector<int> row;
        row.push_back(3);
        row.push_back(0);
        row.push_back(1);
        row.push_back(4);
        row.push_back(2);
        matrix.push_back(std::move(row));
        row.push_back(5);
        row.push_back(6);
        row.push_back(3);
        row.push_back(2);
        row.push_back(1);
        matrix.push_back(std::move(row));
        row.push_back(1);
        row.push_back(2);
        row.push_back(0);
        row.push_back(1);
        row.push_back(5);
        matrix.push_back(std::move(row));
        row.push_back(4);
        row.push_back(1);
        row.push_back(0);
        row.push_back(1);
        row.push_back(7);
        matrix.push_back(std::move(row));
        row.push_back(1);
        row.push_back(0);
        row.push_back(3);
        row.push_back(0);
        row.push_back(5);
        matrix.push_back(std::move(row));
        
        NumMatrix m(matrix);
        auto res = m.sumRegion(2, 1, 4, 3);
        res = m.sumRegion(1, 1, 2, 2);
        res = m.sumRegion(1, 2, 2, 4);
	}
};

#endif
