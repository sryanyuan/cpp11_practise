#ifndef _INC_JUMP_GAME_
#define _INC_JUMP_GAME_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

Example 1:


Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.


Example 2:


Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
Â             jump length is 0, which makes it impossible to reach the last index.

*/

class JumpGame {
public:
	static void test() {
		vector<int> nums;
		nums.push_back(1);
		nums.push_back(2);
		nums.push_back(3);
		auto ret = canJump(nums);
	}

	static bool canJump(vector<int>& nums) {
		// greedy
		int pos = nums.size() - 1;
		for (int i = nums.size() - 2; i >= 0; i--) {
			if (i + nums[i] >= pos) {
				pos = i;
			}
		}
		return pos == 0;
	}

	// Time exceeded ...
	static void dfs(vector<int> &nums, int index, bool &can) {
		if (index >= nums.size()) {
			return;
		}
		if (can) {
			return;
		}
		if (nums[index] + index >= nums.size() - 1) {
			can = true;
			return;
		}
		for (int i = 1; i <= nums[index]; i++) {
			dfs(nums, index + i, can);
		}
	}
};

#endif
