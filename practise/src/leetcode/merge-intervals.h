#ifndef _INC_MERGE_INTERVALS_
#define _INC_MERGE_INTERVALS_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a collection of intervals, merge all overlapping intervals.

Example 1:


Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].


Example 2:


Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considerred overlapping.
*/

class MergeIntervals {
private:
	struct Interval {
		int start;
		int end;
		Interval() : start(0), end(0) {}
		Interval(int s, int e) : start(s), end(e) {}
	};

public:
	static void test() {
		
	}

	static vector<Interval> merge(vector<Interval>& intervals) {
		std::sort(intervals.begin(), intervals.end(), [](const Interval &l, const Interval &r) -> bool {
			if (r.start != l.start) {
				return r.start > l.start;
			}
			return r.end > l.end;
		});
		vector<Interval> res;
		for (auto &iv : intervals) {
			if (res.empty()) {
				res.push_back(iv);
			}
			else {
				auto &last = res.back();
				if (iv.start <= last.end) {
					if (iv.end > last.end) {
						last.end = iv.end;
					}
				}
				else {
					res.push_back(iv);
				}
			}
		}
		return res;
	}
};

#endif
