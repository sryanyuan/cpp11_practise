#ifndef _INC_SINGLE_NUMBER_II_
#define _INC_SINGLE_NUMBER_II_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a non-emptyÂ array of integers, every element appears three times except for one, which appears exactly once. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:


Input: [2,2,3,2]
Output: 3


Example 2:


Input: [0,1,0,1,0,1,99]
Output: 99
*/

class SingleNumberIi {
public:
	static void test() {
		
	}

	static int singleNumber(vector<int>& nums) {
		int bitCnt[32] = {0};
        for (auto v : nums) {
            bitset<32> bv(v);
            for (int i = 0; i < 32; i++) {
                if (bv.test(i)) {
                    ++bitCnt[i];
                }
            }
        }
        int res = 0;
        for (int i = 0; i < sizeof(bitCnt) / sizeof(bitCnt[0]); i++) {
            if (bitCnt[i] % 3 != 0) {
                res |= 1 << i;
            }
        }
        return res;
	}
};

#endif
