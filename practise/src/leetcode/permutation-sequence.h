#ifndef _INC_PERMUTATION_SEQUENCE_
#define _INC_PERMUTATION_SEQUENCE_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:


	"123"
	"132"
	"213"
	"231"
	"312"
	"321"


Given n and k, return the kth permutation sequence.

Note:


	Given n will be between 1 and 9 inclusive.
	Given k will be between 1 and n! inclusive.


Example 1:


Input: n = 3, k = 3
Output: "213"


Example 2:


Input: n = 4, k = 9
Output: "2314"

*/

class PermutationSequence {
public:
	static void test() {
		auto ret = getPermutation(1, 3);
	}

	static string getPermutation(int n, int k) {
		string res;
        int *srcNum = new int[n];
        for (int i = 0; i < n; i++) {
            srcNum[i] = i + 1;
        }
        int *factorial = new int[n];
        factorial[0] = 1;
        for (int i = 1; i < n; i++) {
            factorial[i] = i * factorial[i - 1];
        }
        int ki = k - 1;
        for (int i = 0; i < n; i++) {
            int index = ki / factorial[n - 1 - i];
            int val = 0; int cnt = 0;
            for (int j = 0; j < n && cnt <= index; j++) {
                if (srcNum[j] != 0) {
                    cnt++; val = srcNum[j];
                    if (cnt > index) {
                        srcNum[j] = 0;
                    }
                }
            }
            res.push_back('0' + val);
            ki = ki % factorial[n - 1 - i];
        }
        delete[] factorial;
        delete[] srcNum;
        return res;
	}
};

#endif
