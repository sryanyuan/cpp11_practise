#ifndef _INC_SINGLE_NUMBER_III_
#define _INC_SINGLE_NUMBER_III_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

Example:


Input:  [1,2,1,3,2,5]
Output: [3,5]

Note:


	The order of the result is not important. So in the above example, [5, 3] is also correct.
	Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

*/

class SingleNumberIii {
public:
	static void test() {
		
	}

	static vector<int> singleNumber(vector<int>& nums) {
		int xorn = 0;
        for (auto v : nums) {
            xorn ^= v;
        }
        int flag = xorn ^ (xorn & (xorn - 1));
        vector<int> res(2, 0);
        for (auto v : nums) {
            if ((flag & v) == 0) {
                res[0] ^= v;
            } else {
                res[1] ^= v;
            }
        }
        return res;
	}
};

#endif
