#ifndef _INC_SPIRAL_MATRIX_II_
#define _INC_SPIRAL_MATRIX_II_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.

Example:


Input: 3
Output:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]

*/

class SpiralMatrixIi {
public:
	static void test() {
		auto ret = generateMatrix(3);
	}

	static vector<vector<int>> generateMatrix(int n) {
		vector<vector<int>> matrix;
		for (int i = 0; i < n; i++) {
			vector<int> row(n, 0);
			matrix.push_back(std::move(row));
		}
		int dir = 0;
		int ci = 0, cj = 0;
		int offset = 0;
		for (int i = 0; i < n * n; i++) {
			matrix[ci][cj] = i + 1;
			if (dir == 0) {
				cj++;
				if (cj > n - 1 - offset) {
					cj = n - 1 - offset;
					ci++;
					dir++;
				}
			}
			else if (dir == 1) {
				ci++;
				if (ci > n - 1 - offset) {
					ci = n - 1 - offset;
					cj--;
					dir++;
				}
			}
			else if (dir == 2) {
				cj--;
				if (cj < offset) {
					cj = offset;
					ci--;
					dir++;
				}
			}
			else if (dir == 3) {
				ci--;
				if (ci == offset) {
					ci++;
					cj++;
					dir = 0;
					offset++;
				}
			}
		}
		return matrix;
	}
};

#endif
