#ifndef _INC_WORD_SEARCH_
#define _INC_WORD_SEARCH_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:


board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.

*/

class WordSearch {
public:
	static void test() {
        vector<vector<char>> board;
        vector<char> row;
        row.push_back('a');
        row.push_back('b');
        row.push_back('c');
        row.push_back('e');
        board.push_back(std::move(row));
        row.push_back('s');
        row.push_back('f');
        row.push_back('c');
        row.push_back('s');
        board.push_back(std::move(row));
        row.push_back('a');
        row.push_back('d');
        row.push_back('e');
        row.push_back('e');
        board.push_back(std::move(row));
		auto ret = exist(board, "abcb");
	}

	static bool exist(vector<vector<char>>& board, string word) {
        if (word.empty()) {
            return false;
        }
		int rc = board.size();
        if (0 == rc) {
            return false;
        }
        int cc = board[0].size();
        if (0 == cc) {
            return false;
        }
        bool *steps = new bool[rc * cc];
        for (int si = 0; si < rc * cc; si++) {
            steps[si] = false;
        }
        
	}
};

#endif
