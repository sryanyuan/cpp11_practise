#ifndef _INC_COIN_CHANGE_
#define _INC_COIN_CHANGE_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:


Input: coins = [1, 2, 5], amount = 11
Output: 3 
Explanation: 11 = 5 + 5 + 1

Example 2:


Input: coins = [2], amount = 3
Output: -1


Note:
You may assume that you have an infinite number of each kind of coin.
*/

class CoinChange {
public:
	static void test() {
        int ar[] = {1, 2, 5};
        vector<int> coins(ar, ar + sizeof(ar) / sizeof(ar[0]));
		auto res = coinChange(coins, 8);
	}

	static int coinChange(vector<int>& coins, int amount) {
		vector<int> dps(amount + 1, 0);
        for (int i = 1; i <= amount; i++) {
            int dp = INT_MAX;
            for (auto v : coins) {
                if (i - v >= 0) {
                    int pdp = dps[i - v];
                    if (pdp == INT_MAX) {
                        // Unavailable
                        pdp = INT_MAX;
                    } else {
                        ++pdp;
                    }
                    dp = std::min(dp, pdp);
                }
            }
            dps[i] = dp;
        }
        return dps.back() == INT_MAX ? -1 : dps.back();
	}
};

#endif
