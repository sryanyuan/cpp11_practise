#ifndef _INC_GRAY_CODE_
#define _INC_GRAY_CODE_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
The gray code is a binary numeral system where two successive values differ in only one bit.

Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.

Example 1:


Input: 2
Output: [0,1,3,2]
Explanation:
00 - 0
01 - 1
11 - 3
10 - 2

For a given n, a gray code sequence may not be uniquely defined.
For example, [0,2,3,1] is also a valid gray code sequence.

00 - 0
10 - 2
11 - 3
01 - 1


Example 2:


Input: 0
Output: [0]
Explanation: We define the gray code sequence to begin with 0.
             A gray code sequence of n has size = 2n, which for n = 0 the size is 20 = 1.
             Therefore, for n = 0 the gray code sequence is [0].

*/

class GrayCode {
public:
	static void test() {
		auto ret = grayCode(0);
	}

	static vector<int> grayCode(int n) {
		vector<int> res;
        int val = 0;
        dfs(0, n, val, res);
        return res;
	}

    static void dfs(int index, int n, int &val, vector<int> &res) {
        if (index >= n) {
            res.push_back(val);
            return;
        }
        dfs(index + 1, n, val, res);
        bitset<32> bs(val);
        val = bs.flip(index).to_ulong();
        dfs(index + 1, n, val, res);
    }
};

#endif
