#ifndef _INC_LONGEST_INCREASING_SUBSEQUENCE_
#define _INC_LONGEST_INCREASING_SUBSEQUENCE_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:


Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 

Note: 


	There may be more than one LIS combination, it is only necessary for you to return the length.
	Your algorithm should run in O(n2) complexity.


Follow up: Could you improve it to O(n log n) time complexity?
*/

class LongestIncreasingSubsequence {
public:
	static void test() {
		
	}

	static int lengthOfLIS(vector<int>& nums) {
        if (nums.empty()) {
            return 0;
        }
        vector<int> dps(nums.size(), 1);
        int res = 1;
        for (int i = 0; i < nums.size(); ++i) {
            int mx = 0;
            for (int j = 0; j < i; ++j) {
                if (nums[i] > nums[j]) {
                    if (dps[j] > mx) {
                        mx = dps[j];
                    }
                }
                dps[i] = mx + 1;
                if (dps[i] > res) {
                    res = dps[i];
                }
            }
        }
        return res;
	}
};

#endif
