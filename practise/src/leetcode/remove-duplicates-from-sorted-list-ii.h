#ifndef _INC_REMOVE_DUPLICATES_FROM_SORTED_LIST_II_
#define _INC_REMOVE_DUPLICATES_FROM_SORTED_LIST_II_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

Example 1:


Input: 1->2->3->3->4->4->5
Output: 1->2->5


Example 2:


Input: 1->1->1->2->3
Output: 2->3

*/

class RemoveDuplicatesFromSortedListIi : public SingleLinkedListCls {
public:
	static void test() {
		auto ret = deleteDuplicates(stringToListNode("[1,1]"));
	}

	static ListNode* deleteDuplicates(ListNode* head) {
        if (nullptr == head) {return head;}
        if (head->next == nullptr) {return head;}
		ListNode *dhead = nullptr;
        ListNode *node = head;
        ListNode *pend = nullptr;
        int cnt = 0;
        while (nullptr != node) {
            ListNode *next = node->next;
            if ((nullptr != next && cnt == 0 && next->val != node->val) ||
                (nullptr == next && cnt == 0)) {
                if (nullptr == dhead) {
                    dhead = node;
                } else {
                    pend->next = node;
                }
                pend = node;
            } else if (nullptr != next && next->val == node->val) {
                ++cnt;
            }
            if (nullptr != next && next->val != node->val) {
                cnt = 0;
            }
            node = node->next;
        }
        if (nullptr != pend) {
            pend->next = nullptr;
        }
        return dhead;
	}
};

#endif
