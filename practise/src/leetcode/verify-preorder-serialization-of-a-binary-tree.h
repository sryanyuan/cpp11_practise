#ifndef _INC_VERIFY_PREORDER_SERIALIZATION_OF_A_BINARY_TREE_
#define _INC_VERIFY_PREORDER_SERIALIZATION_OF_A_BINARY_TREE_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.


     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #


For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:


Input: "9,3,4,#,#,1,#,#,2,#,6,#,#"
Output: true

Example 2:


Input: "1,#"
Output: false


Example 3:


Input: "9,#,#,1"
Output: false
*/

class VerifyPreorderSerializationOfABinaryTree {
public:
	static void test() {
		string s = "9,9,9,19,#,9,#,#,#,9,#,69,#,#,#";
        auto res = isValidSerialization(s);
	}

	static bool isValidSerialization(string preorder) {
        if (preorder.back() != '#') {
            return false;
        }
        if (preorder.front() == '#' && preorder.size() > 1) {
            return false;
        }
        int ncnt = 0, ccnt = 0, si = 0;
        for (int i = 0; i < preorder.size() - 1; i++) {
            char v = preorder[i];
            if (v >= '0' && v <= '9') {
                ++si;
            } else if (v == '#') {
                si = 0;
                // #
                ++ccnt;
                if (ccnt > ncnt) {
                    return false;
                }
            } else {
                if (si > 0) {
                    // Number
                    ++ncnt;
                }
                si = 0;
            }
        }
        return ncnt == ccnt;
	}
};

#endif
