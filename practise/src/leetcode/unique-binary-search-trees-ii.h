#ifndef _INC_UNIQUE_BINARY_SEARCH_TREES_II_
#define _INC_UNIQUE_BINARY_SEARCH_TREES_II_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:


Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

*/

class UniqueBinarySearchTreesIi : public TreeNodeCls {
public:
	static void test() {
		auto res = generateTrees(3);
	}

	static vector<TreeNode*> generateTrees(int n) {
		vector<TreeNode*> res;

        for (int i = 1; i <= n; i++) {
            vector<TreeNode*> leftNodes = buildTree(1, i - 1);
            vector<TreeNode*> rightNodes = buildTree(i + 1, n);

            for (auto lnode : leftNodes) {
                for (auto rnode : rightNodes) {
                    TreeNode* pRoot = new TreeNode(i);
                    pRoot->left = lnode;
                    pRoot->right = rnode;
                    res.push_back(pRoot);
                }
            }
        }

        return res;
	}

    static vector<TreeNode*> buildTree(int nStart, int nEnd) {
        vector<TreeNode*> res;
        for (int i = nStart; i <= nEnd; i++) {
            vector<TreeNode*> leftNodes = buildTree(nStart, i - 1);
            vector<TreeNode*> rightNodes = buildTree(i + 1, nEnd);

            for (auto lnode : leftNodes) {
                for (auto rnode : rightNodes) {
                    TreeNode* pRoot = new TreeNode(i);
                    pRoot->left = lnode;
                    pRoot->right = rnode;
                    res.push_back(pRoot);
                }
            }
        }

        if (res.empty()) {
            res.push_back(nullptr);
        }
        return res;
    }
};

#endif
