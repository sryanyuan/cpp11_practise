#ifndef _INC_COUNT_COMPLETE_TREE_NODES_
#define _INC_COUNT_COMPLETE_TREE_NODES_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a complete binary tree, count the number of nodes.

Note: 

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Example:


Input: 
    1
   / \
  2   3
 / \  /
4  5 6

Output: 6
*/

class CountCompleteTreeNodes : public TreeNodeCls {
public:
	static void test() {
		auto t = stringToTreeNode("[1,2,3,4,5,6]");
        auto res = countNodes(t);
	}

	static int countNodes(TreeNode* root) {
        if (nullptr == root) {
            return 0;
        }
		int depth = 0;
        int single = 0;
        bool ctn = true;
        walk(root, depth, 0, single, ctn);
        int res = 0;
        if (depth > 0) {
            if (depth == 1) {
                res = 1;
            } else {
                res = 1 * (1 - pow(2, depth)) / (1 - 2);
            }
        }
        return res - (pow(2, depth - 1) - single);
	}

    static void walk(TreeNode *node, int &depth, int cdep, int &single, bool &ctn) {
        if (nullptr == node || !ctn) {
            return;
        }
        if (nullptr == node->right && nullptr == node->left) {
            // Leaf node
            ++cdep;
            if (cdep > depth) {
                depth = cdep;
                ++single;
            } else if (cdep == depth) {
                ++single;
            } else {
                ctn = false;
            }
            return;
        }
        walk(node->left, depth, cdep + 1, single, ctn);
        walk(node->right, depth, cdep + 1, single, ctn);
    }
};

#endif
