#ifndef _INC_SEARCH_A_2D_MATRIX_
#define _INC_SEARCH_A_2D_MATRIX_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:


	Integers in each row are sorted from left to right.
	The first integer of each row is greater than the last integer of the previous row.


Example 1:


Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true


Example 2:


Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false
*/

class SearchA2dMatrix {
public:
	static void test() {
		vector<vector<int>> matrix;
        vector<int> row;
        row.push_back(1);
        matrix.push_back(std::move(row));
        row.push_back(3);
        matrix.push_back(std::move(row));
        auto ret = searchMatrix(matrix, 1);
	}

	static bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();
        if (row == 0) {
            return false;
        }
        int col = matrix[0].size();
        if (0 == col) {
            return false;
        }
        int l = 0;
        int r = row * col - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            int mv = matrix[mid / col][mid % col];
            if (mv == target) {
                return true;
            }
            if (mv > target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return false;
	}
};

#endif
