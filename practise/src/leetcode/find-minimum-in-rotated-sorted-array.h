#ifndef _INC_FIND_MINIMUM_IN_ROTATED_SORTED_ARRAY_
#define _INC_FIND_MINIMUM_IN_ROTATED_SORTED_ARRAY_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.

Example 1:


Input: [3,4,5,1,2] 
Output: 1


Example 2:


Input: [4,5,6,7,0,1,2]
Output: 0

*/

class FindMinimumInRotatedSortedArray {
public:
	static void test() {
        int vals[] = {4,5,6,7,0,1,2};
        vector<int> nums(vals, vals + sizeof(vals) / sizeof(vals[0]));
		auto res = findMin(nums);
	}

	static int findMin(vector<int>& nums) {
        if (nums.empty()) {
            return 0;
        }
		int l = 0;
        int r = nums.size() - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (mid > 0) {
                if (nums[mid] < nums[mid - 1]) {
                    return nums[mid];
                }
            }
            if (nums[mid] >= nums[0]) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return nums[0];
	}
};

#endif
