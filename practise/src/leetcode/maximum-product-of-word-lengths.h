#ifndef _INC_MAXIMUM_PRODUCT_OF_WORD_LENGTHS_
#define _INC_MAXIMUM_PRODUCT_OF_WORD_LENGTHS_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.

Example 1:


Input: ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16 
Explanation: The two words can be "abcw", "xtfn".

Example 2:


Input: ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4 
Explanation: The two words can be "ab", "cd".

Example 3:


Input: ["a","aa","aaa","aaaa"]
Output: 0 
Explanation: No such pair of words.

*/

class MaximumProductOfWordLengths {
public:
	static void test() {
		vector<string> words;
        words.push_back("abcw");
        words.push_back("baz");
        words.push_back("foo");
        words.push_back("bar");
        words.push_back("xtfn");
        words.push_back("abcdef");
        auto res = maxProduct(words);
	}

	static int maxProduct(vector<string>& words) {
		int res = 0;
        int wsz = int(words.size());
        vector<int> masks(words.size(), 0);
        for (int i = 0; i < wsz; i++) {
            int mask = 0;
            for (auto c : words[i]) {
                mask |= (1 << (c - 'a'));
            }
            masks[i] = mask;
        }
        for (int i = 0; i < wsz - 1; i++) {
            int mli = -1;
            for (int j = i + 1; j < wsz; j++) {
                if ((masks[i] & masks[j]) != 0) {
                    continue;
                }
                if (mli == -1 || (words[mli].size() < words[j].size())) {
                    mli = j;
                }
            }
            if (mli != -1) {
                res = std::max(res, int(words[i].size() * words[mli].size()));
            }
        }
        return res;
	}
};

#endif
