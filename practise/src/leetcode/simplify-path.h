#ifndef _INC_SIMPLIFY_PATH_
#define _INC_SIMPLIFY_PATH_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given an absolute path for a file (Unix-style), simplify it.

For example,
path = "/home/", => "/home"
path = "/a/./b/../../c/", => "/c"

Corner Cases:


	Did you consider the case where path = "/../"?
	In this case, you should return "/".
	Another corner case is the path might contain multiple slashes '/' together, such as "/home//foo/".
	In this case, you should ignore redundant slashes and return "/home/foo".

*/

class SimplifyPath {
public:
	static void test() {
		
	}

	static string simplifyPath(string path) {
        list<string> dirs;
        char *buf = new char[path.size() + 1];
        for (int i = 0; i < path.size() + 1; i++) {
            buf[0] = 0;
        }
        int si = 0;

		for (int i = 0; i < path.size(); i++) {
            if (path[i] != '/') {
                buf[si++] = path[i];
                if (i != path.size() - 1) {
                    continue;
                }
            }
            buf[si] = '\0';
            if (buf[0] != '\0') {
                string str = string(buf);
                if (str == ".") {
                    // nothing
                } else if (str == "..") {
                    if (!dirs.empty()) {
                        dirs.pop_back();
                    }
                } else {
                    dirs.push_back(std::move(str));
                }
            }
            si = 0;
        }

        string res;
        for (auto &str : dirs) {
            res += "/";
            res += str;
        }
        return res.empty() ? "/" : res;
	}
};

#endif
