#ifndef _INC_SUBSETS_II_
#define _INC_SUBSETS_II_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:


Input: [1,2,2]
Output:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
*/

class SubsetsIi {
public:
	static void test() {
		vector<int> nums;
        nums.push_back(1);
        nums.push_back(2);
        nums.push_back(2);
        auto ret = subsetsWithDup(nums);
	}

	static vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        std::sort(nums.begin(), nums.end());
		vector<vector<int>> res;
        vector<int> row;
        if (nums.empty()) {
            res.push_back(row);
            return res;
        }
        dfs(0, nums, row, res);
        return res;
	}

    static void dfs(int index, vector<int> &nums, vector<int> &row, vector<vector<int>> &res) {
        res.push_back(row);
        int prev = 0;
        for (int i = index; i < nums.size(); i++) {
            if (i != index) {
                for (i; i < nums.size(); i++) {
                    if (prev != nums[i]) {
                        break;
                    }
                }
                if (i >= nums.size()) {
                    break;
                }
            }
            row.push_back(nums[i]);
            dfs(i + 1, nums, row, res);
            row.pop_back();
            prev = nums[i];
        }
    }
};

#endif
