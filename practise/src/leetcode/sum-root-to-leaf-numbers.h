#ifndef _INC_SUM_ROOT_TO_LEAF_NUMBERS_
#define _INC_SUM_ROOT_TO_LEAF_NUMBERS_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

Note: A leaf is a node with no children.

Example:


Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.

Example 2:


Input: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
*/

class SumRootToLeafNumbers : public TreeNodeCls {
public:
	static void test() {
		auto t = stringToTreeNode("[1,2,3]");
        auto res = sumNumbers(t);
	}

	static int sumNumbers(TreeNode* root) {
		int sum = 0;
        vector<int> nums;
        walk(root, nums, sum);
        return sum;
	}

    static void walk(TreeNode *node, vector<int> &nums, int &tsum) {
        if (nullptr == node) {
            return;
        }
        nums.push_back(node->val);
        if (nullptr == node->left && nullptr == node->right) {
            int num = 0;
            int mlt = 1;
            for (int i = nums.size() - 1; i >= 0; i--) {
                num += nums[i] * mlt;
                mlt *= 10;
            }
            tsum += num;
            nums.pop_back();
            return;
        }
        walk(node->left, nums, tsum);
        walk(node->right, nums, tsum);
        nums.pop_back();
    }
};

#endif
