#ifndef _INC_COMBINATION_SUM_III_
#define _INC_COMBINATION_SUM_III_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:


	All numbers will be positive integers.
	The solution set must not contain duplicate combinations.


Example 1:


Input: k = 3, n = 7
Output: [[1,2,4]]


Example 2:


Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]


*/

class CombinationSumIii {
public:
	static void test() {
		
	}

	static vector<vector<int>> combinationSum3(int k, int n) {
		vector<vector<int>> res;
        vector<int> row;
        dfs(k, n, 1, row, 0, res);
        return res;
	}

    static void dfs(int k, int n, int index, vector<int> &row, int rsum, vector<vector<int>> &res) {
        if (row.size() == k) {
            if (rsum == n) {
                res.push_back(row);
            }
            return;
        }
        if (row.size() > k) {
            return;
        }

        for (int i = index; i <= 9; i++) {
            row.push_back(i);
            dfs(k, n, i + 1, row, rsum + i, res);
            row.pop_back();
        }
    }
};

#endif
