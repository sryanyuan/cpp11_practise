#ifndef _INC_DECODE_WAYS_
#define _INC_DECODE_WAYS_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
A message containing letters from A-Z is being encoded to numbers using the following mapping:


'A' -> 1
'B' -> 2
...
'Z' -> 26


Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:


Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).


Example 2:


Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
*/

class DecodeWays {
public:
	static void test() {
		auto ret = numDecodings("27");
	}

	static int numDecodings(string s) {
        // Dynamic programming
        int pp = 1;
        int p = 1;
        for (int i = 0; i < s.size(); i++) {
            int cur = 0;
            if (s[i] != '0') {
                cur += p;
            }
            if (i - 1 >= 0) {
                if (s[i - 1] == '1' ||
                    (s[i - 1] == '2' && s[i] >= '0' && s[i] <= '6')) {
                        cur += pp;
                }
            }
            pp = p; p = cur;
        }
        return p;
	}

    // Deep first search is too slow
    /*
    if (s.empty()) {return 0;}
    int sum = 0;
    dfs(0, s, sum);
    return sum;
    */
    static void dfs(int index, string &s, int &sum) {
        if (index >= s.size()) {
            sum++;
            return;
        }
        if (s[index] == '0') {
            return;
        }
        dfs(index + 1, s, sum);
        if (index + 1 < s.size() && s[index] >= '1' && s[index] <= '2') {
            if ((s[index] == '2' && s[index + 1] >= '0' && s[index + 1] <= '6') ||
                (s[index] == '1' && s[index + 1] >= '0' && s[index + 1] <= '9')) {
                dfs(index + 2, s, sum);
            }
        }
    }
};

#endif
