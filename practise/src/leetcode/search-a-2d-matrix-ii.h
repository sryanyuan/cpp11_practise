#ifndef _INC_SEARCH_A_2D_MATRIX_II_
#define _INC_SEARCH_A_2D_MATRIX_II_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:


	Integers in each row are sorted in ascending from left to right.
	Integers in each column are sorted in ascending from top to bottom.


Example:

Consider the following matrix:


[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]


Given target = 5, return true.

Given target = 20, return false.
*/

class SearchA2dMatrixIi {
public:
	static void test() {
		
	}

	static bool searchMatrix(vector<vector<int>>& matrix, int target) {
		if (matrix.size() == 0 || matrix[0].size() == 0) {
            return false;
        }
        int rc = matrix.size();
        int cc = matrix[0].size();
        int l = 0, r = rc * cc - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            int midV = matrix[mid / cc][mid % cc];
            if (midV == target) {
                return true;
            }
            if (midV > target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return false;
	}
};

#endif
