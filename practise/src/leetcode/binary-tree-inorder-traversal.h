#ifndef _INC_BINARY_TREE_INORDER_TRAVERSAL_
#define _INC_BINARY_TREE_INORDER_TRAVERSAL_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a binary tree, return the inorder traversal of its nodes' values.

Example:


Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

Follow up: Recursive solution is trivial, could you do it iteratively?
*/

class BinaryTreeInorderTraversal : public TreeNodeCls {
public:
	static void test() {
		
	}

	static vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
		dfs(root, res);
        return res;
	}

    static void trastack(TreeNode *node, vector<int> &vals) {
        if (nullptr == node) {
            return;
        }
        stack<TreeNode*> stk;
        TreeNode *cur = node;
        while(!stk.empty() || nullptr != cur) {
            while (nullptr != cur) {
                stk.push(cur);
                cur = cur->left;
            }
            cur = stk.top();
            stk.pop();
            vals.push_back(cur->val);
            cur = cur->right;
        }
    }

    static void dfs(TreeNode *node, vector<int> &vals) {
        if (nullptr == node) {
            return;
        }
        dfs(node->left, vals);
        vals.push_back(node->val);
        dfs(node->right, vals);
    }
};

#endif
