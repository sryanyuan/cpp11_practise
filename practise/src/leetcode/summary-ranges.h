#ifndef _INC_SUMMARY_RANGES_
#define _INC_SUMMARY_RANGES_

#include "_common_all.h"
#include "_common_list.h"
#include "_common_binary_tree.h"

/* Generated by leetgen (github.com/sryanyuan/leetgen)
Given a sorted integer array without duplicates, return the summary of its ranges.

Example 1:


Input:  [0,1,2,4,5,7]
Output: ["0->2","4->5","7"]
Explanation: 0,1,2 form a continuous range; 4,5 form a continuous range.


Example 2:


Input:  [0,2,3,4,6,8,9]
Output: ["0","2->4","6","8->9"]
Explanation: 2,3,4 form a continuous range; 8,9 form a continuous range.

*/

class SummaryRanges {
public:
	static void test() {
        int ar[] = {0,1,2,4,5,7};
        vector<int> nums(ar, ar + sizeof(ar) / sizeof(ar[0]));
		auto res = summaryRanges(nums);
	}

	static vector<string> summaryRanges(vector<int>& nums) {
        vector<string> res;
        int si = 0;
        int ei = 0;
        int cnt = 0;
        while (si < nums.size()) {
            int prev = nums[si];
            int i = si + 1;
            for (i; i < nums.size(); i++) {
                if (nums[i] - prev != 1) {
                    ei = i - 1;
                    break;
                }
                prev = nums[i];
            }
            if (i >= nums.size()) {
                ei = nums.size() - 1;
            }
            if (si != ei) {
                string s = std::to_string(nums[si]) + "->" + std::to_string(nums[ei]);
                res.push_back(std::move(s));
            } else {
                res.push_back(std::to_string(nums[si]));
            }
            si = ei + 1;
        }
        return res;
	}
};

#endif
